if ($c.target.class != 'windows')
    c.libs += "-lpthread"

c.poptions += \
    "-I$src_base" \
    "-DBUILDING_WOLFSSL" \
    "-DHAVE_CONFIG_H" \
    "-DWOLFSSL_WOLFSSH" \
    "-DHAVE_THREAD_LS" \
    "-DNO_DO178" \
    "-D_POSIX_THREADS" \
    "-DWOLFSSL_DTLS" \
    "-DWOLFSSL_DTLS_MTU" \
    "-DERROR_QUEUE_PER_THREAD" \
    "-DTFM_TIMING_RESISTANT" \
    "-DECC_TIMING_RESISTANT" \
    "-DWC_RSA_BLINDING" \
    "-DTITAN_SESSION_CACHE" \
    "-DWOLFSSL_AESNI" \
    "-DUSE_INTEL_SPEEDUP" \
    "-DWOLFSSL_USE_ALIGN" \
    "-DHAVE_INTEL_RDRAND" \
    "-DHAVE_AMD_RDSEED" \
    "-DHAVE_BLAKE2" \
    "-DHAVE_BLAKE2B" \
    "-DHAVE_BLAKE2S" \
    "-DWOLFSSL_SHA224" \
    "-DWOLFSSL_SHA512" \
    "-DWOLFSSL_SHA384" \
    "-DHAVE_HKDF" \
    "-DNO_DSA" \
    "-DHAVE_ECC" \
    "-DTFM_ECC256" \
    "-DECC_SHAMIR" \
    "-DHAVE_CURVE25519" \
    "-DHAVE_CURVE448" \
    "-DHAVE_ED448" \
    "-DWOLFSSL_ED448_STREAMING_VERIFY" \
    "-DWC_RSA_PSS" \
    "-DWOLFSSL_BASE64_ENCODE" \
    "-DWOLFSSL_CMAC" \
    "-DWOLFSSL_AES_DIRECT" \
    "-DWOLFSSL_AES_XTS" \
    "-DWOLFSSL_AES_DIRECT" \
    "-DWOLFSSL_SHA3" \
    "-DWOLFSSL_SHAKE256" \
    "-DHAVE_POLY1305" \
    "-DHAVE_CHACHA" \
    "-DHAVE_XCHACHA" \
    "-DHAVE_HASHDRBG" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_SNI" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_ALPN" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_SUPPORTED_CURVES" \
    "-DHAVE_FFDHE_2048" \
    "-DHAVE_SUPPORTED_CURVES" \
    "-DWOLFSSL_TLS13" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_EXTENDED_MASTER" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_SNI" \
    "-DHAVE_MAX_FRAGMENT" \
    "-DHAVE_TRUNCATED_HMAC" \
    "-DHAVE_ALPN" \
    "-DHAVE_TRUSTED_CA" \
    "-DHAVE_SUPPORTED_CURVES" \
    "-DHAVE_ENCRYPT_THEN_MAC" \
    "-DHAVE_CRL" \
    "-DHAVE_OCSP" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_CERTIFICATE_STATUS_REQUEST" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_CERTIFICATE_STATUS_REQUEST_V2" \
    "-DWOLFSSL_ALT_CERT_CHAINS" \
    "-DWOLFSSL_DES_ECB" \
    "-DNO_PSK" \
    "-DNO_MD4" \
    "-DWOLFSSL_ENCRYPTED_KEYS" \
    "-DHAVE_SCRYPT" \
    "-DUSE_FAST_MATH" \
    "-DWOLFSSL_X86_64_BUILD" \
    "-DWC_NO_ASYNC_THREADING" \
    "-DHAVE_DH_DEFAULT_PARAMS" \
    "-DWOLFSSL_KEY_GEN" \
    "-DWOLFSSL_CERT_REQ" \
    "-DWOLFSSL_CERT_GEN" \
    "-DWOLFSSL_CERT_EXT" \
    "-DHAVE_ED25519" \
    "-DWOLFSSL_ED25519_STREAMING_VERIFY" \
    "-DWOLFSSL_AES_COUNTER" \
    "-DWOLFSSL_AES_DIRECT" \
    "-DOPENSSL_EXTRA" \
    "-DWOLFSSL_ALWAYS_VERIFY_CB" \
    "-DWOLFSSL_VERIFY_CB_ALL_CERTS" \
    "-DWOLFSSL_EXTRA_ALERTS" \
    "-DHAVE_EXT_CACHE" \
    "-DWOLFSSL_FORCE_CACHE_ON_TICKET" \
    "-DWOLFSSL_AKID_NAME" \
    "-DHAVE_CTS" \
    "-DGCM_TABLE_4BIT" \
    "-DHAVE_AESGCM" \
    "-DWOLFSSL_PUBLIC_MP" \
    "-DHAVE_TLS_EXTENSIONS" \
    "-DHAVE_SERVER_RENEGOTIATION_INFO" \
    "-DWOLFSSL_ALLOW_RC4" \
    "-DHAVE___UINT128_T=1" \
    "-DHAVE_WC_INTROSPECTION"

c.coptions += \
    "-maes" \
    "-mpclmul"

c.libs += "-lm"

./: lib{wolfssl}: \
    wolfssl/h{**} \
    wolfcrypt/src/c{hmac hash cpuid kdf random sha256 rsa aes cmac des3 sha sha512 sha3 logging wc_port error wc_encrypt signature wolfmath memory dh asn coding poly1305 arc4 md5 pwdbased pkcs12 blake2b blake2s chacha chacha20_poly1305 tfm ecc curve25519 ed25519 ge_operations curve448 ed448 fe_448 ge_448 misc} \
    src/c{internal wolfio keys ssl tls tls13 ocsp crl} \
    include/h{**} \
    h{config}

lib{wolfssl}:
{
    cc.export.poptions += "-I$src_base/include" "-I$src_base"
}

sources_assembly = \
    wolfcrypt/src/file{sha256_asm.S} \
    wolfcrypt/src/file{sha512_asm.S} \
    wolfcrypt/src/file{poly1305_asm.S} \
    wolfcrypt/src/file{aes_asm.S} \
    wolfcrypt/src/file{aes_gcm_asm.S} \
    wolfcrypt/src/file{chacha_asm.S} \
    wolfcrypt/src/file{fe_x25519_asm.S}

for f: $sources_assembly
{
    lib{wolfssl}: $f
    obja{$name($f)...a.o} objs{$name($f)...so.o}: $f
    {{
        diag as $>
        $c.path -o $path($>) -c $path($<[0]) -DWOLFSSL_WOLFSSH -DNDEBUG -DHAVE_AESGCM -DWOLFSSL_ED448_STREAMING_VERIFY -DWOLFSSL_ED25519_STREAMING_VERIFY
    }}
    lib{wolfssl}: obj{$name($f)}
}

{hbmis objs}{*}: c.poptions += "-DWOLFSSL_DLL"
liba{wolfssl}: cc.export.poptions += "-DWOLFSSL_DLL"

h{*}: install = false
wolfssl/h{*}:
{
    install = include/wolfssl/
    install.subdirs = true
}

include/h{*}:
{
    install = include/
    install.subdirs = true
}
